// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: APIRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Authentication {

  /// <summary>Holder for reflection information generated from APIRequest.proto</summary>
  public static partial class APIRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for APIRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static APIRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBUElSZXF1ZXN0LnByb3RvEg5BdXRoZW50aWNhdGlvbiJtCgpBcGlSZXF1",
            "ZXN0EiAKGGVuY3J5cHRlZFRyYW5zbWlzc2lvbktleRgBIAEoDBITCgtwdWJs",
            "aWNLZXlJZBgCIAEoBRIOCgZsb2NhbGUYAyABKAkSGAoQZW5jcnlwdGVkUGF5",
            "bG9hZBgEIAEoDCJqChFBcGlSZXF1ZXN0UGF5bG9hZBIPCgdwYXlsb2FkGAEg",
            "ASgMEh0KFWVuY3J5cHRlZFNlc3Npb25Ub2tlbhgCIAEoDBIRCgl0aW1lVG9r",
            "ZW4YAyABKAwSEgoKYXBpVmVyc2lvbhgEIAEoBSI2CglUcmFuc2Zvcm0SCwoD",
            "a2V5GAEgASgMEhwKFGVuY3J5cHRlZERldmljZVRva2VuGAIgASgMIjoKDURl",
            "dmljZVJlcXVlc3QSFQoNY2xpZW50VmVyc2lvbhgBIAEoCRISCgpkZXZpY2VO",
            "YW1lGAIgASgJIlQKC0F1dGhSZXF1ZXN0EhUKDWNsaWVudFZlcnNpb24YASAB",
            "KAkSEAoIdXNlcm5hbWUYAiABKAkSHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4Y",
            "AyABKAwibwoUTmV3VXNlck1pbmltdW1QYXJhbXMSGQoRbWluaW11bUl0ZXJh",
            "dGlvbnMYASABKAUSGgoScGFzc3dvcmRNYXRjaFJlZ2V4GAIgAygJEiAKGHBh",
            "c3N3b3JkTWF0Y2hEZXNjcmlwdGlvbhgDIAMoCSKJAQoPUHJlTG9naW5SZXF1",
            "ZXN0EjAKC2F1dGhSZXF1ZXN0GAEgASgLMhsuQXV0aGVudGljYXRpb24uQXV0",
            "aFJlcXVlc3QSLAoJbG9naW5UeXBlGAIgASgOMhkuQXV0aGVudGljYXRpb24u",
            "TG9naW5UeXBlEhYKDnR3b0ZhY3RvclRva2VuGAMgASgMIuoBCgxMb2dpblJl",
            "cXVlc3QSMAoLYXV0aFJlcXVlc3QYASABKAsyGy5BdXRoZW50aWNhdGlvbi5B",
            "dXRoUmVxdWVzdBIsCglsb2dpblR5cGUYAiABKA4yGS5BdXRoZW50aWNhdGlv",
            "bi5Mb2dpblR5cGUSHwoXYXV0aGVudGljYXRpb25IYXNoUHJpbWUYAyABKAwS",
            "FQoNcmFuZG9tSGFzaEtleRgEIAEoDBIfChdlbmNyeXB0ZWRUd29GYWN0b3JU",
            "b2tlbhgFIAEoDBIhChllbmNyeXB0ZWRCcmVhY2hXYXRjaFRva2VuGAYgASgM",
            "IvgCChNSZWdpc3RyYXRpb25SZXF1ZXN0EjAKC2F1dGhSZXF1ZXN0GAEgASgL",
            "MhsuQXV0aGVudGljYXRpb24uQXV0aFJlcXVlc3QSOAoPdXNlckF1dGhSZXF1",
            "ZXN0GAIgASgLMh8uQXV0aGVudGljYXRpb24uVXNlckF1dGhSZXF1ZXN0EhoK",
            "EmVuY3J5cHRlZENsaWVudEtleRgDIAEoDBIbChNlbmNyeXB0ZWRQcml2YXRl",
            "S2V5GAQgASgMEhEKCXB1YmxpY0tleRgFIAEoDBIYChB2ZXJpZmljYXRpb25D",
            "b2RlGAYgASgJEh4KFmRlcHJlY2F0ZWRBdXRoSGFzaEhhc2gYByABKAwSJAoc",
            "ZGVwcmVjYXRlZEVuY3J5cHRlZENsaWVudEtleRgIIAEoDBIlCh1kZXByZWNh",
            "dGVkRW5jcnlwdGVkUHJpdmF0ZUtleRgJIAEoDBIiChpkZXByZWNhdGVkRW5j",
            "cnlwdGlvblBhcmFtcxgKIAEoDCJcCg5EZXZpY2VSZXNwb25zZRIcChRlbmNy",
            "eXB0ZWREZXZpY2VUb2tlbhgBIAEoDBIsCgZzdGF0dXMYAiABKA4yHC5BdXRo",
            "ZW50aWNhdGlvbi5EZXZpY2VTdGF0dXMiVgoEU2FsdBISCgppdGVyYXRpb25z",
            "GAEgASgFEgwKBHNhbHQYAiABKAwSEQoJYWxnb3JpdGhtGAMgASgFEgsKA3Vp",
            "ZBgEIAEoDBIMCgRuYW1lGAUgASgJIiAKEFR3b0ZhY3RvckNoYW5uZWwSDAoE",
            "dHlwZRgBIAEoBSKgAQoQUHJlTG9naW5SZXNwb25zZRIsCgZzdGF0dXMYASAB",
            "KA4yHC5BdXRoZW50aWNhdGlvbi5EZXZpY2VTdGF0dXMSIgoEc2FsdBgCIAMo",
            "CzIULkF1dGhlbnRpY2F0aW9uLlNhbHQSOgoQdHdvRmFjdG9yQ2hhbm5lbBgD",
            "IAMoCzIgLkF1dGhlbnRpY2F0aW9uLlR3b0ZhY3RvckNoYW5uZWwioAMKDUxv",
            "Z2luUmVzcG9uc2USHgoWZW5jcnlycHRlZFNlc3Npb25Ub2tlbhgBIAEoDBIm",
            "CgV2YXVsdBgCIAEoCzIXLkF1dGhlbnRpY2F0aW9uLkxpY2Vuc2USJQoEY2hh",
            "dBgDIAEoCzIXLkF1dGhlbnRpY2F0aW9uLkxpY2Vuc2USKAoHc3RvcmFnZRgE",
            "IAEoCzIXLkF1dGhlbnRpY2F0aW9uLkxpY2Vuc2USLAoLYnJlYWNoV2F0Y2gY",
            "BSABKAsyFy5BdXRoZW50aWNhdGlvbi5MaWNlbnNlEjAKC2FjY291bnRUeXBl",
            "GAYgASgOMhsuQXV0aGVudGljYXRpb24uQWNjb3VudFR5cGUSFAoMZW5jcnlw",
            "dGVkREFUGAcgASgMEhQKDGVuY3J5cHRlZFBBVBgIIAEoDBIUCgxlbmNyeXB0",
            "ZWRFQVQYCSABKAwSGAoQZW5jcnlwdGVkRGF0YUtleRgKIAEoDBI6ChBzZXNz",
            "aW9uVG9rZW5UeXBlGAsgAygOMiAuQXV0aGVudGljYXRpb24uU2Vzc2lvblRv",
            "a2VuVHlwZSKDAQoHTGljZW5zZRIPCgdjcmVhdGVkGAEgASgDEhIKCmV4cGly",
            "YXRpb24YAiABKAMSNAoNbGljZW5zZVN0YXR1cxgDIAEoDjIdLkF1dGhlbnRp",
            "Y2F0aW9uLkxpY2Vuc2VTdGF0dXMSDAoEcGFpZBgEIAEoCBIPCgdtZXNzYWdl",
            "GAUgASgJIkcKD093bmVybGVzc1JlY29yZBIRCglyZWNvcmRVaWQYASABKAwS",
            "EQoJcmVjb3JkS2V5GAIgASgMEg4KBnN0YXR1cxgDIAEoBSJMChBPd25lcmxl",
            "c3NSZWNvcmRzEjgKD293bmVybGVzc1JlY29yZBgBIAMoCzIfLkF1dGhlbnRp",
            "Y2F0aW9uLk93bmVybGVzc1JlY29yZCLXAQoPVXNlckF1dGhSZXF1ZXN0EgsK",
            "A3VpZBgBIAEoDBIMCgRzYWx0GAIgASgMEhIKCml0ZXJhdGlvbnMYAyABKAUS",
            "GgoSZW5jcnlwdGVkQ2xpZW50S2V5GAQgASgMEhAKCGF1dGhIYXNoGAUgASgM",
            "EhgKEGVuY3J5cHRlZERhdGFLZXkYBiABKAwSLAoJbG9naW5UeXBlGAcgASgO",
            "MhkuQXV0aGVudGljYXRpb24uTG9naW5UeXBlEgwKBG5hbWUYCCABKAkSEQoJ",
            "YWxnb3JpdGhtGAkgASgFIhkKClVpZFJlcXVlc3QSCwoDdWlkGAEgAygMIlcK",
            "IERldmljZUNsaWVudFZlcnNpb25VcGRhdGVSZXF1ZXN0EhwKFGVuY3J5cHRl",
            "ZERldmljZVRva2VuGAEgASgMEhUKDWNsaWVudFZlcnNpb24YAiABKAki0AEK",
            "FkNvbnZlcnRVc2VyVG9WM1JlcXVlc3QSMAoLYXV0aFJlcXVlc3QYASABKAsy",
            "Gy5BdXRoZW50aWNhdGlvbi5BdXRoUmVxdWVzdBI4Cg91c2VyQXV0aFJlcXVl",
            "c3QYAiABKAsyHy5BdXRoZW50aWNhdGlvbi5Vc2VyQXV0aFJlcXVlc3QSGgoS",
            "ZW5jcnlwdGVkQ2xpZW50S2V5GAMgASgMEhsKE2VuY3J5cHRlZFByaXZhdGVL",
            "ZXkYBCABKAwSEQoJcHVibGljS2V5GAUgASgMIiQKEFJldmlzaW9uUmVzcG9u",
            "c2USEAoIcmV2aXNpb24YASABKAMiJgoSQ2hhbmdlRW1haWxSZXF1ZXN0EhAK",
            "CG5ld0VtYWlsGAEgASgJIjgKE0NoYW5nZUVtYWlsUmVzcG9uc2USIQoZZW5j",
            "cnlwdGVkQ2hhbmdlRW1haWxUb2tlbhgBIAEoDCq5AgoRU3VwcG9ydGVkTGFu",
            "Z3VhZ2USCwoHRU5HTElTSBAAEgoKBkFSQUJJQxABEgsKB0JSSVRJU0gQAhIL",
            "CgdDSElORVNFEAMSFQoRQ0hJTkVTRV9IT05HX0tPTkcQBBISCg5DSElORVNF",
            "X1RBSVdBThAFEgkKBURVVENIEAYSCgoGRlJFTkNIEAcSCgoGR0VSTUFOEAgS",
            "CQoFR1JFRUsQCRIKCgZIRUJSRVcQChILCgdJVEFMSUFOEAsSDAoISkFQQU5F",
            "U0UQDBIKCgZLT1JFQU4QDRIKCgZQT0xJU0gQDhIOCgpQT1JUVUdVRVNFEA8S",
            "FQoRUE9SVFVHVUVTRV9CUkFaSUwQEBIMCghST01BTklBThAREgsKB1JVU1NJ",
            "QU4QEhIKCgZTTE9WQUsQExILCgdTUEFOSVNIEBQqRQoJTG9naW5UeXBlEgoK",
            "Bk5PUk1BTBAAEgcKA1NTTxABEgcKA0JJTxACEg0KCUFMVEVSTkFURRADEgsK",
            "B09GRkxJTkUQBCo+CgxEZXZpY2VTdGF0dXMSEQoNTkVFRF9BUFBST1ZBTBAA",
            "EgYKAk9LEAESEwoPREVWSUNFX0RJU0FCTEVEEAIqQQoNTGljZW5zZVN0YXR1",
            "cxIJCgVPVEhFUhAAEgoKBkFDVElWRRABEgsKB0VYUElSRUQQAhIMCghESVNB",
            "QkxFRBADKjcKC0FjY291bnRUeXBlEgwKCENPTlNVTUVSEAASCgoGRkFNSUxZ",
            "EAESDgoKRU5URVJQUklTRRACKl0KEFNlc3Npb25Ub2tlblR5cGUSEgoOTk9f",
            "UkVTVFJJQ1RJT04QABIUChBBQ0NPVU5UX1JFQ09WRVJZEAESEQoNU0hBUkVf",
            "QUNDT1VOVBACEgwKCFBVUkNIQVNFEANCKgoYY29tLmtlZXBlcnNlY3VyaXR5",
            "LnByb3RvQg5BdXRoZW50aWNhdGlvbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Authentication.SupportedLanguage), typeof(global::Authentication.LoginType), typeof(global::Authentication.DeviceStatus), typeof(global::Authentication.LicenseStatus), typeof(global::Authentication.AccountType), typeof(global::Authentication.SessionTokenType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApiRequest), global::Authentication.ApiRequest.Parser, new[]{ "EncryptedTransmissionKey", "PublicKeyId", "Locale", "EncryptedPayload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApiRequestPayload), global::Authentication.ApiRequestPayload.Parser, new[]{ "Payload", "EncryptedSessionToken", "TimeToken", "ApiVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.Transform), global::Authentication.Transform.Parser, new[]{ "Key", "EncryptedDeviceToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceRequest), global::Authentication.DeviceRequest.Parser, new[]{ "ClientVersion", "DeviceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.AuthRequest), global::Authentication.AuthRequest.Parser, new[]{ "ClientVersion", "Username", "EncryptedDeviceToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.NewUserMinimumParams), global::Authentication.NewUserMinimumParams.Parser, new[]{ "MinimumIterations", "PasswordMatchRegex", "PasswordMatchDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.PreLoginRequest), global::Authentication.PreLoginRequest.Parser, new[]{ "AuthRequest", "LoginType", "TwoFactorToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginRequest), global::Authentication.LoginRequest.Parser, new[]{ "AuthRequest", "LoginType", "AuthenticationHashPrime", "RandomHashKey", "EncryptedTwoFactorToken", "EncryptedBreachWatchToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RegistrationRequest), global::Authentication.RegistrationRequest.Parser, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey", "VerificationCode", "DeprecatedAuthHashHash", "DeprecatedEncryptedClientKey", "DeprecatedEncryptedPrivateKey", "DeprecatedEncryptionParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceResponse), global::Authentication.DeviceResponse.Parser, new[]{ "EncryptedDeviceToken", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.Salt), global::Authentication.Salt.Parser, new[]{ "Iterations", "Salt_", "Algorithm", "Uid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorChannel), global::Authentication.TwoFactorChannel.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.PreLoginResponse), global::Authentication.PreLoginResponse.Parser, new[]{ "Status", "Salt", "TwoFactorChannel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginResponse), global::Authentication.LoginResponse.Parser, new[]{ "EncryrptedSessionToken", "Vault", "Chat", "Storage", "BreachWatch", "AccountType", "EncryptedDAT", "EncryptedPAT", "EncryptedEAT", "EncryptedDataKey", "SessionTokenType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.License), global::Authentication.License.Parser, new[]{ "Created", "Expiration", "LicenseStatus", "Paid", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.OwnerlessRecord), global::Authentication.OwnerlessRecord.Parser, new[]{ "RecordUid", "RecordKey", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.OwnerlessRecords), global::Authentication.OwnerlessRecords.Parser, new[]{ "OwnerlessRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserAuthRequest), global::Authentication.UserAuthRequest.Parser, new[]{ "Uid", "Salt", "Iterations", "EncryptedClientKey", "AuthHash", "EncryptedDataKey", "LoginType", "Name", "Algorithm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UidRequest), global::Authentication.UidRequest.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceClientVersionUpdateRequest), global::Authentication.DeviceClientVersionUpdateRequest.Parser, new[]{ "EncryptedDeviceToken", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ConvertUserToV3Request), global::Authentication.ConvertUserToV3Request.Parser, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RevisionResponse), global::Authentication.RevisionResponse.Parser, new[]{ "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeEmailRequest), global::Authentication.ChangeEmailRequest.Parser, new[]{ "NewEmail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeEmailResponse), global::Authentication.ChangeEmailResponse.Parser, new[]{ "EncryptedChangeEmailToken" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SupportedLanguage {
    [pbr::OriginalName("ENGLISH")] English = 0,
    [pbr::OriginalName("ARABIC")] Arabic = 1,
    [pbr::OriginalName("BRITISH")] British = 2,
    [pbr::OriginalName("CHINESE")] Chinese = 3,
    [pbr::OriginalName("CHINESE_HONG_KONG")] ChineseHongKong = 4,
    [pbr::OriginalName("CHINESE_TAIWAN")] ChineseTaiwan = 5,
    [pbr::OriginalName("DUTCH")] Dutch = 6,
    [pbr::OriginalName("FRENCH")] French = 7,
    [pbr::OriginalName("GERMAN")] German = 8,
    [pbr::OriginalName("GREEK")] Greek = 9,
    [pbr::OriginalName("HEBREW")] Hebrew = 10,
    [pbr::OriginalName("ITALIAN")] Italian = 11,
    [pbr::OriginalName("JAPANESE")] Japanese = 12,
    [pbr::OriginalName("KOREAN")] Korean = 13,
    [pbr::OriginalName("POLISH")] Polish = 14,
    [pbr::OriginalName("PORTUGUESE")] Portuguese = 15,
    [pbr::OriginalName("PORTUGUESE_BRAZIL")] PortugueseBrazil = 16,
    [pbr::OriginalName("ROMANIAN")] Romanian = 17,
    [pbr::OriginalName("RUSSIAN")] Russian = 18,
    [pbr::OriginalName("SLOVAK")] Slovak = 19,
    [pbr::OriginalName("SPANISH")] Spanish = 20,
  }

  public enum LoginType {
    [pbr::OriginalName("NORMAL")] Normal = 0,
    [pbr::OriginalName("SSO")] Sso = 1,
    [pbr::OriginalName("BIO")] Bio = 2,
    [pbr::OriginalName("ALTERNATE")] Alternate = 3,
    [pbr::OriginalName("OFFLINE")] Offline = 4,
  }

  public enum DeviceStatus {
    [pbr::OriginalName("NEED_APPROVAL")] NeedApproval = 0,
    [pbr::OriginalName("OK")] Ok = 1,
    [pbr::OriginalName("DEVICE_DISABLED")] DeviceDisabled = 2,
  }

  public enum LicenseStatus {
    /// <summary>
    /// trial for bw
    /// </summary>
    [pbr::OriginalName("OTHER")] Other = 0,
    [pbr::OriginalName("ACTIVE")] Active = 1,
    [pbr::OriginalName("EXPIRED")] Expired = 2,
    [pbr::OriginalName("DISABLED")] Disabled = 3,
  }

  public enum AccountType {
    [pbr::OriginalName("CONSUMER")] Consumer = 0,
    [pbr::OriginalName("FAMILY")] Family = 1,
    [pbr::OriginalName("ENTERPRISE")] Enterprise = 2,
  }

  public enum SessionTokenType {
    [pbr::OriginalName("NO_RESTRICTION")] NoRestriction = 0,
    [pbr::OriginalName("ACCOUNT_RECOVERY")] AccountRecovery = 1,
    [pbr::OriginalName("SHARE_ACCOUNT")] ShareAccount = 2,
    [pbr::OriginalName("PURCHASE")] Purchase = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ApiRequest : pb::IMessage<ApiRequest> {
    private static readonly pb::MessageParser<ApiRequest> _parser = new pb::MessageParser<ApiRequest>(() => new ApiRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest(ApiRequest other) : this() {
      encryptedTransmissionKey_ = other.encryptedTransmissionKey_;
      publicKeyId_ = other.publicKeyId_;
      locale_ = other.locale_;
      encryptedPayload_ = other.encryptedPayload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest Clone() {
      return new ApiRequest(this);
    }

    /// <summary>Field number for the "encryptedTransmissionKey" field.</summary>
    public const int EncryptedTransmissionKeyFieldNumber = 1;
    private pb::ByteString encryptedTransmissionKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTransmissionKey {
      get { return encryptedTransmissionKey_; }
      set {
        encryptedTransmissionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKeyId" field.</summary>
    public const int PublicKeyIdFieldNumber = 2;
    private int publicKeyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicKeyId {
      get { return publicKeyId_; }
      set {
        publicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 3;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPayload" field.</summary>
    public const int EncryptedPayloadFieldNumber = 4;
    private pb::ByteString encryptedPayload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPayload {
      get { return encryptedPayload_; }
      set {
        encryptedPayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedTransmissionKey != other.EncryptedTransmissionKey) return false;
      if (PublicKeyId != other.PublicKeyId) return false;
      if (Locale != other.Locale) return false;
      if (EncryptedPayload != other.EncryptedPayload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedTransmissionKey.Length != 0) hash ^= EncryptedTransmissionKey.GetHashCode();
      if (PublicKeyId != 0) hash ^= PublicKeyId.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (EncryptedPayload.Length != 0) hash ^= EncryptedPayload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedTransmissionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedTransmissionKey);
      }
      if (PublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PublicKeyId);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Locale);
      }
      if (EncryptedPayload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedTransmissionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTransmissionKey);
      }
      if (PublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicKeyId);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (EncryptedPayload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedTransmissionKey.Length != 0) {
        EncryptedTransmissionKey = other.EncryptedTransmissionKey;
      }
      if (other.PublicKeyId != 0) {
        PublicKeyId = other.PublicKeyId;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.EncryptedPayload.Length != 0) {
        EncryptedPayload = other.EncryptedPayload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedTransmissionKey = input.ReadBytes();
            break;
          }
          case 16: {
            PublicKeyId = input.ReadInt32();
            break;
          }
          case 26: {
            Locale = input.ReadString();
            break;
          }
          case 34: {
            EncryptedPayload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiRequestPayload : pb::IMessage<ApiRequestPayload> {
    private static readonly pb::MessageParser<ApiRequestPayload> _parser = new pb::MessageParser<ApiRequestPayload>(() => new ApiRequestPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiRequestPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload(ApiRequestPayload other) : this() {
      payload_ = other.payload_;
      encryptedSessionToken_ = other.encryptedSessionToken_;
      timeToken_ = other.timeToken_;
      apiVersion_ = other.apiVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload Clone() {
      return new ApiRequestPayload(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 2;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeToken" field.</summary>
    public const int TimeTokenFieldNumber = 3;
    private pb::ByteString timeToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TimeToken {
      get { return timeToken_; }
      set {
        timeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apiVersion" field.</summary>
    public const int ApiVersionFieldNumber = 4;
    private int apiVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApiVersion {
      get { return apiVersion_; }
      set {
        apiVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiRequestPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiRequestPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (TimeToken != other.TimeToken) return false;
      if (ApiVersion != other.ApiVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (TimeToken.Length != 0) hash ^= TimeToken.GetHashCode();
      if (ApiVersion != 0) hash ^= ApiVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (TimeToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TimeToken);
      }
      if (ApiVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApiVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (TimeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TimeToken);
      }
      if (ApiVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApiVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiRequestPayload other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.TimeToken.Length != 0) {
        TimeToken = other.TimeToken;
      }
      if (other.ApiVersion != 0) {
        ApiVersion = other.ApiVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 26: {
            TimeToken = input.ReadBytes();
            break;
          }
          case 32: {
            ApiVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      key_ = other.key_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceRequest : pb::IMessage<DeviceRequest> {
    private static readonly pb::MessageParser<DeviceRequest> _parser = new pb::MessageParser<DeviceRequest>(() => new DeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest(DeviceRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      deviceName_ = other.deviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest Clone() {
      return new DeviceRequest(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRequest : pb::IMessage<AuthRequest> {
    private static readonly pb::MessageParser<AuthRequest> _parser = new pb::MessageParser<AuthRequest>(() => new AuthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest(AuthRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      username_ = other.username_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest Clone() {
      return new AuthRequest(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 3;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (Username != other.Username) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewUserMinimumParams : pb::IMessage<NewUserMinimumParams> {
    private static readonly pb::MessageParser<NewUserMinimumParams> _parser = new pb::MessageParser<NewUserMinimumParams>(() => new NewUserMinimumParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewUserMinimumParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams(NewUserMinimumParams other) : this() {
      minimumIterations_ = other.minimumIterations_;
      passwordMatchRegex_ = other.passwordMatchRegex_.Clone();
      passwordMatchDescription_ = other.passwordMatchDescription_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams Clone() {
      return new NewUserMinimumParams(this);
    }

    /// <summary>Field number for the "minimumIterations" field.</summary>
    public const int MinimumIterationsFieldNumber = 1;
    private int minimumIterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumIterations {
      get { return minimumIterations_; }
      set {
        minimumIterations_ = value;
      }
    }

    /// <summary>Field number for the "passwordMatchRegex" field.</summary>
    public const int PasswordMatchRegexFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_passwordMatchRegex_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> passwordMatchRegex_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PasswordMatchRegex {
      get { return passwordMatchRegex_; }
    }

    /// <summary>Field number for the "passwordMatchDescription" field.</summary>
    public const int PasswordMatchDescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_passwordMatchDescription_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> passwordMatchDescription_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PasswordMatchDescription {
      get { return passwordMatchDescription_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewUserMinimumParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewUserMinimumParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumIterations != other.MinimumIterations) return false;
      if(!passwordMatchRegex_.Equals(other.passwordMatchRegex_)) return false;
      if(!passwordMatchDescription_.Equals(other.passwordMatchDescription_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumIterations != 0) hash ^= MinimumIterations.GetHashCode();
      hash ^= passwordMatchRegex_.GetHashCode();
      hash ^= passwordMatchDescription_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinimumIterations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumIterations);
      }
      passwordMatchRegex_.WriteTo(output, _repeated_passwordMatchRegex_codec);
      passwordMatchDescription_.WriteTo(output, _repeated_passwordMatchDescription_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumIterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumIterations);
      }
      size += passwordMatchRegex_.CalculateSize(_repeated_passwordMatchRegex_codec);
      size += passwordMatchDescription_.CalculateSize(_repeated_passwordMatchDescription_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewUserMinimumParams other) {
      if (other == null) {
        return;
      }
      if (other.MinimumIterations != 0) {
        MinimumIterations = other.MinimumIterations;
      }
      passwordMatchRegex_.Add(other.passwordMatchRegex_);
      passwordMatchDescription_.Add(other.passwordMatchDescription_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumIterations = input.ReadInt32();
            break;
          }
          case 18: {
            passwordMatchRegex_.AddEntriesFrom(input, _repeated_passwordMatchRegex_codec);
            break;
          }
          case 26: {
            passwordMatchDescription_.AddEntriesFrom(input, _repeated_passwordMatchDescription_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreLoginRequest : pb::IMessage<PreLoginRequest> {
    private static readonly pb::MessageParser<PreLoginRequest> _parser = new pb::MessageParser<PreLoginRequest>(() => new PreLoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest(PreLoginRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      loginType_ = other.loginType_;
      twoFactorToken_ = other.twoFactorToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest Clone() {
      return new PreLoginRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 2;
    private global::Authentication.LoginType loginType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "twoFactorToken" field.</summary>
    public const int TwoFactorTokenFieldNumber = 3;
    private pb::ByteString twoFactorToken_ = pb::ByteString.Empty;
    /// <summary>
    /// optional - if supplied, it will be validated if it needs refreshing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TwoFactorToken {
      get { return twoFactorToken_; }
      set {
        twoFactorToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (LoginType != other.LoginType) return false;
      if (TwoFactorToken != other.TwoFactorToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (TwoFactorToken.Length != 0) hash ^= TwoFactorToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (LoginType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginType);
      }
      if (TwoFactorToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TwoFactorToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (TwoFactorToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TwoFactorToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.TwoFactorToken.Length != 0) {
        TwoFactorToken = other.TwoFactorToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 16: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 26: {
            TwoFactorToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      loginType_ = other.loginType_;
      authenticationHashPrime_ = other.authenticationHashPrime_;
      randomHashKey_ = other.randomHashKey_;
      encryptedTwoFactorToken_ = other.encryptedTwoFactorToken_;
      encryptedBreachWatchToken_ = other.encryptedBreachWatchToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 2;
    private global::Authentication.LoginType loginType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "authenticationHashPrime" field.</summary>
    public const int AuthenticationHashPrimeFieldNumber = 3;
    private pb::ByteString authenticationHashPrime_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthenticationHashPrime {
      get { return authenticationHashPrime_; }
      set {
        authenticationHashPrime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randomHashKey" field.</summary>
    public const int RandomHashKeyFieldNumber = 4;
    private pb::ByteString randomHashKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RandomHashKey {
      get { return randomHashKey_; }
      set {
        randomHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTwoFactorToken" field.</summary>
    public const int EncryptedTwoFactorTokenFieldNumber = 5;
    private pb::ByteString encryptedTwoFactorToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTwoFactorToken {
      get { return encryptedTwoFactorToken_; }
      set {
        encryptedTwoFactorToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedBreachWatchToken" field.</summary>
    public const int EncryptedBreachWatchTokenFieldNumber = 6;
    private pb::ByteString encryptedBreachWatchToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedBreachWatchToken {
      get { return encryptedBreachWatchToken_; }
      set {
        encryptedBreachWatchToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (LoginType != other.LoginType) return false;
      if (AuthenticationHashPrime != other.AuthenticationHashPrime) return false;
      if (RandomHashKey != other.RandomHashKey) return false;
      if (EncryptedTwoFactorToken != other.EncryptedTwoFactorToken) return false;
      if (EncryptedBreachWatchToken != other.EncryptedBreachWatchToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (AuthenticationHashPrime.Length != 0) hash ^= AuthenticationHashPrime.GetHashCode();
      if (RandomHashKey.Length != 0) hash ^= RandomHashKey.GetHashCode();
      if (EncryptedTwoFactorToken.Length != 0) hash ^= EncryptedTwoFactorToken.GetHashCode();
      if (EncryptedBreachWatchToken.Length != 0) hash ^= EncryptedBreachWatchToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (LoginType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginType);
      }
      if (AuthenticationHashPrime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AuthenticationHashPrime);
      }
      if (RandomHashKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RandomHashKey);
      }
      if (EncryptedTwoFactorToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedTwoFactorToken);
      }
      if (EncryptedBreachWatchToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedBreachWatchToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (AuthenticationHashPrime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthenticationHashPrime);
      }
      if (RandomHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RandomHashKey);
      }
      if (EncryptedTwoFactorToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTwoFactorToken);
      }
      if (EncryptedBreachWatchToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedBreachWatchToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.AuthenticationHashPrime.Length != 0) {
        AuthenticationHashPrime = other.AuthenticationHashPrime;
      }
      if (other.RandomHashKey.Length != 0) {
        RandomHashKey = other.RandomHashKey;
      }
      if (other.EncryptedTwoFactorToken.Length != 0) {
        EncryptedTwoFactorToken = other.EncryptedTwoFactorToken;
      }
      if (other.EncryptedBreachWatchToken.Length != 0) {
        EncryptedBreachWatchToken = other.EncryptedBreachWatchToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 16: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthenticationHashPrime = input.ReadBytes();
            break;
          }
          case 34: {
            RandomHashKey = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedTwoFactorToken = input.ReadBytes();
            break;
          }
          case 50: {
            EncryptedBreachWatchToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationRequest : pb::IMessage<RegistrationRequest> {
    private static readonly pb::MessageParser<RegistrationRequest> _parser = new pb::MessageParser<RegistrationRequest>(() => new RegistrationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest(RegistrationRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      userAuthRequest_ = other.userAuthRequest_ != null ? other.userAuthRequest_.Clone() : null;
      encryptedClientKey_ = other.encryptedClientKey_;
      encryptedPrivateKey_ = other.encryptedPrivateKey_;
      publicKey_ = other.publicKey_;
      verificationCode_ = other.verificationCode_;
      deprecatedAuthHashHash_ = other.deprecatedAuthHashHash_;
      deprecatedEncryptedClientKey_ = other.deprecatedEncryptedClientKey_;
      deprecatedEncryptedPrivateKey_ = other.deprecatedEncryptedPrivateKey_;
      deprecatedEncryptionParams_ = other.deprecatedEncryptionParams_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest Clone() {
      return new RegistrationRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "userAuthRequest" field.</summary>
    public const int UserAuthRequestFieldNumber = 2;
    private global::Authentication.UserAuthRequest userAuthRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.UserAuthRequest UserAuthRequest {
      get { return userAuthRequest_; }
      set {
        userAuthRequest_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 3;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPrivateKey" field.</summary>
    public const int EncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPrivateKey {
      get { return encryptedPrivateKey_; }
      set {
        encryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 5;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 6;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedAuthHashHash" field.</summary>
    public const int DeprecatedAuthHashHashFieldNumber = 7;
    private pb::ByteString deprecatedAuthHashHash_ = pb::ByteString.Empty;
    /// <summary>
    /// these will be ignored once the v2 clients are obsolete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedAuthHashHash {
      get { return deprecatedAuthHashHash_; }
      set {
        deprecatedAuthHashHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptedClientKey" field.</summary>
    public const int DeprecatedEncryptedClientKeyFieldNumber = 8;
    private pb::ByteString deprecatedEncryptedClientKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptedClientKey {
      get { return deprecatedEncryptedClientKey_; }
      set {
        deprecatedEncryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptedPrivateKey" field.</summary>
    public const int DeprecatedEncryptedPrivateKeyFieldNumber = 9;
    private pb::ByteString deprecatedEncryptedPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptedPrivateKey {
      get { return deprecatedEncryptedPrivateKey_; }
      set {
        deprecatedEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptionParams" field.</summary>
    public const int DeprecatedEncryptionParamsFieldNumber = 10;
    private pb::ByteString deprecatedEncryptionParams_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptionParams {
      get { return deprecatedEncryptionParams_; }
      set {
        deprecatedEncryptionParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (!object.Equals(UserAuthRequest, other.UserAuthRequest)) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (EncryptedPrivateKey != other.EncryptedPrivateKey) return false;
      if (PublicKey != other.PublicKey) return false;
      if (VerificationCode != other.VerificationCode) return false;
      if (DeprecatedAuthHashHash != other.DeprecatedAuthHashHash) return false;
      if (DeprecatedEncryptedClientKey != other.DeprecatedEncryptedClientKey) return false;
      if (DeprecatedEncryptedPrivateKey != other.DeprecatedEncryptedPrivateKey) return false;
      if (DeprecatedEncryptionParams != other.DeprecatedEncryptionParams) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (userAuthRequest_ != null) hash ^= UserAuthRequest.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (EncryptedPrivateKey.Length != 0) hash ^= EncryptedPrivateKey.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (DeprecatedAuthHashHash.Length != 0) hash ^= DeprecatedAuthHashHash.GetHashCode();
      if (DeprecatedEncryptedClientKey.Length != 0) hash ^= DeprecatedEncryptedClientKey.GetHashCode();
      if (DeprecatedEncryptedPrivateKey.Length != 0) hash ^= DeprecatedEncryptedPrivateKey.GetHashCode();
      if (DeprecatedEncryptionParams.Length != 0) hash ^= DeprecatedEncryptionParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PublicKey);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerificationCode);
      }
      if (DeprecatedAuthHashHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(DeprecatedAuthHashHash);
      }
      if (DeprecatedEncryptedClientKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(DeprecatedEncryptedClientKey);
      }
      if (DeprecatedEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(DeprecatedEncryptedPrivateKey);
      }
      if (DeprecatedEncryptionParams.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DeprecatedEncryptionParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (DeprecatedAuthHashHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedAuthHashHash);
      }
      if (DeprecatedEncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptedClientKey);
      }
      if (DeprecatedEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptedPrivateKey);
      }
      if (DeprecatedEncryptionParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptionParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.userAuthRequest_ != null) {
        if (userAuthRequest_ == null) {
          UserAuthRequest = new global::Authentication.UserAuthRequest();
        }
        UserAuthRequest.MergeFrom(other.UserAuthRequest);
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.EncryptedPrivateKey.Length != 0) {
        EncryptedPrivateKey = other.EncryptedPrivateKey;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      if (other.DeprecatedAuthHashHash.Length != 0) {
        DeprecatedAuthHashHash = other.DeprecatedAuthHashHash;
      }
      if (other.DeprecatedEncryptedClientKey.Length != 0) {
        DeprecatedEncryptedClientKey = other.DeprecatedEncryptedClientKey;
      }
      if (other.DeprecatedEncryptedPrivateKey.Length != 0) {
        DeprecatedEncryptedPrivateKey = other.DeprecatedEncryptedPrivateKey;
      }
      if (other.DeprecatedEncryptionParams.Length != 0) {
        DeprecatedEncryptionParams = other.DeprecatedEncryptionParams;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 18: {
            if (userAuthRequest_ == null) {
              UserAuthRequest = new global::Authentication.UserAuthRequest();
            }
            input.ReadMessage(UserAuthRequest);
            break;
          }
          case 26: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 42: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 50: {
            VerificationCode = input.ReadString();
            break;
          }
          case 58: {
            DeprecatedAuthHashHash = input.ReadBytes();
            break;
          }
          case 66: {
            DeprecatedEncryptedClientKey = input.ReadBytes();
            break;
          }
          case 74: {
            DeprecatedEncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 82: {
            DeprecatedEncryptionParams = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceResponse : pb::IMessage<DeviceResponse> {
    private static readonly pb::MessageParser<DeviceResponse> _parser = new pb::MessageParser<DeviceResponse>(() => new DeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse(DeviceResponse other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse Clone() {
      return new DeviceResponse(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Authentication.DeviceStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 16: {
            Status = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Salt : pb::IMessage<Salt> {
    private static readonly pb::MessageParser<Salt> _parser = new pb::MessageParser<Salt>(() => new Salt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Salt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt(Salt other) : this() {
      iterations_ = other.iterations_;
      salt_ = other.salt_;
      algorithm_ = other.algorithm_;
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt Clone() {
      return new Salt(this);
    }

    /// <summary>Field number for the "iterations" field.</summary>
    public const int IterationsFieldNumber = 1;
    private int iterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iterations {
      get { return iterations_; }
      set {
        iterations_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int Salt_FieldNumber = 2;
    private pb::ByteString salt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Salt_ {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 3;
    private int algorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Salt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Salt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Iterations != other.Iterations) return false;
      if (Salt_ != other.Salt_) return false;
      if (Algorithm != other.Algorithm) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Iterations != 0) hash ^= Iterations.GetHashCode();
      if (Salt_.Length != 0) hash ^= Salt_.GetHashCode();
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iterations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Iterations);
      }
      if (Salt_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Salt_);
      }
      if (Algorithm != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Algorithm);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iterations);
      }
      if (Salt_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Salt_);
      }
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Algorithm);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Salt other) {
      if (other == null) {
        return;
      }
      if (other.Iterations != 0) {
        Iterations = other.Iterations;
      }
      if (other.Salt_.Length != 0) {
        Salt_ = other.Salt_;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Iterations = input.ReadInt32();
            break;
          }
          case 18: {
            Salt_ = input.ReadBytes();
            break;
          }
          case 24: {
            Algorithm = input.ReadInt32();
            break;
          }
          case 34: {
            Uid = input.ReadBytes();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorChannel : pb::IMessage<TwoFactorChannel> {
    private static readonly pb::MessageParser<TwoFactorChannel> _parser = new pb::MessageParser<TwoFactorChannel>(() => new TwoFactorChannel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel(TwoFactorChannel other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel Clone() {
      return new TwoFactorChannel(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorChannel other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreLoginResponse : pb::IMessage<PreLoginResponse> {
    private static readonly pb::MessageParser<PreLoginResponse> _parser = new pb::MessageParser<PreLoginResponse>(() => new PreLoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreLoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse(PreLoginResponse other) : this() {
      status_ = other.status_;
      salt_ = other.salt_.Clone();
      twoFactorChannel_ = other.twoFactorChannel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse Clone() {
      return new PreLoginResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Authentication.DeviceStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Authentication.Salt> _repeated_salt_codec
        = pb::FieldCodec.ForMessage(18, global::Authentication.Salt.Parser);
    private readonly pbc::RepeatedField<global::Authentication.Salt> salt_ = new pbc::RepeatedField<global::Authentication.Salt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.Salt> Salt {
      get { return salt_; }
    }

    /// <summary>Field number for the "twoFactorChannel" field.</summary>
    public const int TwoFactorChannelFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Authentication.TwoFactorChannel> _repeated_twoFactorChannel_codec
        = pb::FieldCodec.ForMessage(26, global::Authentication.TwoFactorChannel.Parser);
    private readonly pbc::RepeatedField<global::Authentication.TwoFactorChannel> twoFactorChannel_ = new pbc::RepeatedField<global::Authentication.TwoFactorChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.TwoFactorChannel> TwoFactorChannel {
      get { return twoFactorChannel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreLoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreLoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!salt_.Equals(other.salt_)) return false;
      if(!twoFactorChannel_.Equals(other.twoFactorChannel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= salt_.GetHashCode();
      hash ^= twoFactorChannel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      salt_.WriteTo(output, _repeated_salt_codec);
      twoFactorChannel_.WriteTo(output, _repeated_twoFactorChannel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += salt_.CalculateSize(_repeated_salt_codec);
      size += twoFactorChannel_.CalculateSize(_repeated_twoFactorChannel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreLoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      salt_.Add(other.salt_);
      twoFactorChannel_.Add(other.twoFactorChannel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
          case 18: {
            salt_.AddEntriesFrom(input, _repeated_salt_codec);
            break;
          }
          case 26: {
            twoFactorChannel_.AddEntriesFrom(input, _repeated_twoFactorChannel_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      encryrptedSessionToken_ = other.encryrptedSessionToken_;
      vault_ = other.vault_ != null ? other.vault_.Clone() : null;
      chat_ = other.chat_ != null ? other.chat_.Clone() : null;
      storage_ = other.storage_ != null ? other.storage_.Clone() : null;
      breachWatch_ = other.breachWatch_ != null ? other.breachWatch_.Clone() : null;
      accountType_ = other.accountType_;
      encryptedDAT_ = other.encryptedDAT_;
      encryptedPAT_ = other.encryptedPAT_;
      encryptedEAT_ = other.encryptedEAT_;
      encryptedDataKey_ = other.encryptedDataKey_;
      sessionTokenType_ = other.sessionTokenType_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "encryrptedSessionToken" field.</summary>
    public const int EncryrptedSessionTokenFieldNumber = 1;
    private pb::ByteString encryrptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryrptedSessionToken {
      get { return encryrptedSessionToken_; }
      set {
        encryrptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vault" field.</summary>
    public const int VaultFieldNumber = 2;
    private global::Authentication.License vault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.License Vault {
      get { return vault_; }
      set {
        vault_ = value;
      }
    }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 3;
    private global::Authentication.License chat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.License Chat {
      get { return chat_; }
      set {
        chat_ = value;
      }
    }

    /// <summary>Field number for the "storage" field.</summary>
    public const int StorageFieldNumber = 4;
    private global::Authentication.License storage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.License Storage {
      get { return storage_; }
      set {
        storage_ = value;
      }
    }

    /// <summary>Field number for the "breachWatch" field.</summary>
    public const int BreachWatchFieldNumber = 5;
    private global::Authentication.License breachWatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.License BreachWatch {
      get { return breachWatch_; }
      set {
        breachWatch_ = value;
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 6;
    private global::Authentication.AccountType accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDAT" field.</summary>
    public const int EncryptedDATFieldNumber = 7;
    private pb::ByteString encryptedDAT_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDAT {
      get { return encryptedDAT_; }
      set {
        encryptedDAT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPAT" field.</summary>
    public const int EncryptedPATFieldNumber = 8;
    private pb::ByteString encryptedPAT_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPAT {
      get { return encryptedPAT_; }
      set {
        encryptedPAT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedEAT" field.</summary>
    public const int EncryptedEATFieldNumber = 9;
    private pb::ByteString encryptedEAT_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedEAT {
      get { return encryptedEAT_; }
      set {
        encryptedEAT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 10;
    private pb::ByteString encryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDataKey {
      get { return encryptedDataKey_; }
      set {
        encryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sessionTokenType" field.</summary>
    public const int SessionTokenTypeFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Authentication.SessionTokenType> _repeated_sessionTokenType_codec
        = pb::FieldCodec.ForEnum(90, x => (int) x, x => (global::Authentication.SessionTokenType) x);
    private readonly pbc::RepeatedField<global::Authentication.SessionTokenType> sessionTokenType_ = new pbc::RepeatedField<global::Authentication.SessionTokenType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SessionTokenType> SessionTokenType {
      get { return sessionTokenType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryrptedSessionToken != other.EncryrptedSessionToken) return false;
      if (!object.Equals(Vault, other.Vault)) return false;
      if (!object.Equals(Chat, other.Chat)) return false;
      if (!object.Equals(Storage, other.Storage)) return false;
      if (!object.Equals(BreachWatch, other.BreachWatch)) return false;
      if (AccountType != other.AccountType) return false;
      if (EncryptedDAT != other.EncryptedDAT) return false;
      if (EncryptedPAT != other.EncryptedPAT) return false;
      if (EncryptedEAT != other.EncryptedEAT) return false;
      if (EncryptedDataKey != other.EncryptedDataKey) return false;
      if(!sessionTokenType_.Equals(other.sessionTokenType_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryrptedSessionToken.Length != 0) hash ^= EncryrptedSessionToken.GetHashCode();
      if (vault_ != null) hash ^= Vault.GetHashCode();
      if (chat_ != null) hash ^= Chat.GetHashCode();
      if (storage_ != null) hash ^= Storage.GetHashCode();
      if (breachWatch_ != null) hash ^= BreachWatch.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (EncryptedDAT.Length != 0) hash ^= EncryptedDAT.GetHashCode();
      if (EncryptedPAT.Length != 0) hash ^= EncryptedPAT.GetHashCode();
      if (EncryptedEAT.Length != 0) hash ^= EncryptedEAT.GetHashCode();
      if (EncryptedDataKey.Length != 0) hash ^= EncryptedDataKey.GetHashCode();
      hash ^= sessionTokenType_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryrptedSessionToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryrptedSessionToken);
      }
      if (vault_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vault);
      }
      if (chat_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Chat);
      }
      if (storage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Storage);
      }
      if (breachWatch_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BreachWatch);
      }
      if (AccountType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AccountType);
      }
      if (EncryptedDAT.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedDAT);
      }
      if (EncryptedPAT.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(EncryptedPAT);
      }
      if (EncryptedEAT.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(EncryptedEAT);
      }
      if (EncryptedDataKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(EncryptedDataKey);
      }
      sessionTokenType_.WriteTo(output, _repeated_sessionTokenType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryrptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryrptedSessionToken);
      }
      if (vault_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vault);
      }
      if (chat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chat);
      }
      if (storage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Storage);
      }
      if (breachWatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BreachWatch);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (EncryptedDAT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDAT);
      }
      if (EncryptedPAT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPAT);
      }
      if (EncryptedEAT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEAT);
      }
      if (EncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDataKey);
      }
      size += sessionTokenType_.CalculateSize(_repeated_sessionTokenType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryrptedSessionToken.Length != 0) {
        EncryrptedSessionToken = other.EncryrptedSessionToken;
      }
      if (other.vault_ != null) {
        if (vault_ == null) {
          Vault = new global::Authentication.License();
        }
        Vault.MergeFrom(other.Vault);
      }
      if (other.chat_ != null) {
        if (chat_ == null) {
          Chat = new global::Authentication.License();
        }
        Chat.MergeFrom(other.Chat);
      }
      if (other.storage_ != null) {
        if (storage_ == null) {
          Storage = new global::Authentication.License();
        }
        Storage.MergeFrom(other.Storage);
      }
      if (other.breachWatch_ != null) {
        if (breachWatch_ == null) {
          BreachWatch = new global::Authentication.License();
        }
        BreachWatch.MergeFrom(other.BreachWatch);
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.EncryptedDAT.Length != 0) {
        EncryptedDAT = other.EncryptedDAT;
      }
      if (other.EncryptedPAT.Length != 0) {
        EncryptedPAT = other.EncryptedPAT;
      }
      if (other.EncryptedEAT.Length != 0) {
        EncryptedEAT = other.EncryptedEAT;
      }
      if (other.EncryptedDataKey.Length != 0) {
        EncryptedDataKey = other.EncryptedDataKey;
      }
      sessionTokenType_.Add(other.sessionTokenType_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryrptedSessionToken = input.ReadBytes();
            break;
          }
          case 18: {
            if (vault_ == null) {
              Vault = new global::Authentication.License();
            }
            input.ReadMessage(Vault);
            break;
          }
          case 26: {
            if (chat_ == null) {
              Chat = new global::Authentication.License();
            }
            input.ReadMessage(Chat);
            break;
          }
          case 34: {
            if (storage_ == null) {
              Storage = new global::Authentication.License();
            }
            input.ReadMessage(Storage);
            break;
          }
          case 42: {
            if (breachWatch_ == null) {
              BreachWatch = new global::Authentication.License();
            }
            input.ReadMessage(BreachWatch);
            break;
          }
          case 48: {
            AccountType = (global::Authentication.AccountType) input.ReadEnum();
            break;
          }
          case 58: {
            EncryptedDAT = input.ReadBytes();
            break;
          }
          case 66: {
            EncryptedPAT = input.ReadBytes();
            break;
          }
          case 74: {
            EncryptedEAT = input.ReadBytes();
            break;
          }
          case 82: {
            EncryptedDataKey = input.ReadBytes();
            break;
          }
          case 90:
          case 88: {
            sessionTokenType_.AddEntriesFrom(input, _repeated_sessionTokenType_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class License : pb::IMessage<License> {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License(License other) : this() {
      created_ = other.created_;
      expiration_ = other.expiration_;
      licenseStatus_ = other.licenseStatus_;
      paid_ = other.paid_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 2;
    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "licenseStatus" field.</summary>
    public const int LicenseStatusFieldNumber = 3;
    private global::Authentication.LicenseStatus licenseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LicenseStatus LicenseStatus {
      get { return licenseStatus_; }
      set {
        licenseStatus_ = value;
      }
    }

    /// <summary>Field number for the "paid" field.</summary>
    public const int PaidFieldNumber = 4;
    private bool paid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paid {
      get { return paid_; }
      set {
        paid_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Expiration != other.Expiration) return false;
      if (LicenseStatus != other.LicenseStatus) return false;
      if (Paid != other.Paid) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (LicenseStatus != 0) hash ^= LicenseStatus.GetHashCode();
      if (Paid != false) hash ^= Paid.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Created != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Created);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Expiration);
      }
      if (LicenseStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LicenseStatus);
      }
      if (Paid != false) {
        output.WriteRawTag(32);
        output.WriteBool(Paid);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (LicenseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LicenseStatus);
      }
      if (Paid != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.LicenseStatus != 0) {
        LicenseStatus = other.LicenseStatus;
      }
      if (other.Paid != false) {
        Paid = other.Paid;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Created = input.ReadInt64();
            break;
          }
          case 16: {
            Expiration = input.ReadInt64();
            break;
          }
          case 24: {
            LicenseStatus = (global::Authentication.LicenseStatus) input.ReadEnum();
            break;
          }
          case 32: {
            Paid = input.ReadBool();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwnerlessRecord : pb::IMessage<OwnerlessRecord> {
    private static readonly pb::MessageParser<OwnerlessRecord> _parser = new pb::MessageParser<OwnerlessRecord>(() => new OwnerlessRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwnerlessRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord(OwnerlessRecord other) : this() {
      recordUid_ = other.recordUid_;
      recordKey_ = other.recordKey_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord Clone() {
      return new OwnerlessRecord(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    /// <summary>
    /// used in get request, set request, set response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordKey" field.</summary>
    public const int RecordKeyFieldNumber = 2;
    private pb::ByteString recordKey_ = pb::ByteString.Empty;
    /// <summary>
    /// used in set request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordKey {
      get { return recordKey_; }
      set {
        recordKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// used in set response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwnerlessRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwnerlessRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (RecordKey != other.RecordKey) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (RecordKey.Length != 0) hash ^= RecordKey.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (RecordKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordKey);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (RecordKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordKey);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwnerlessRecord other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.RecordKey.Length != 0) {
        RecordKey = other.RecordKey;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            RecordKey = input.ReadBytes();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwnerlessRecords : pb::IMessage<OwnerlessRecords> {
    private static readonly pb::MessageParser<OwnerlessRecords> _parser = new pb::MessageParser<OwnerlessRecords>(() => new OwnerlessRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwnerlessRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords(OwnerlessRecords other) : this() {
      ownerlessRecord_ = other.ownerlessRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords Clone() {
      return new OwnerlessRecords(this);
    }

    /// <summary>Field number for the "ownerlessRecord" field.</summary>
    public const int OwnerlessRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.OwnerlessRecord> _repeated_ownerlessRecord_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.OwnerlessRecord.Parser);
    private readonly pbc::RepeatedField<global::Authentication.OwnerlessRecord> ownerlessRecord_ = new pbc::RepeatedField<global::Authentication.OwnerlessRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.OwnerlessRecord> OwnerlessRecord {
      get { return ownerlessRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwnerlessRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwnerlessRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ownerlessRecord_.Equals(other.ownerlessRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ownerlessRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ownerlessRecord_.WriteTo(output, _repeated_ownerlessRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ownerlessRecord_.CalculateSize(_repeated_ownerlessRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwnerlessRecords other) {
      if (other == null) {
        return;
      }
      ownerlessRecord_.Add(other.ownerlessRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ownerlessRecord_.AddEntriesFrom(input, _repeated_ownerlessRecord_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAuthRequest : pb::IMessage<UserAuthRequest> {
    private static readonly pb::MessageParser<UserAuthRequest> _parser = new pb::MessageParser<UserAuthRequest>(() => new UserAuthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAuthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest(UserAuthRequest other) : this() {
      uid_ = other.uid_;
      salt_ = other.salt_;
      iterations_ = other.iterations_;
      encryptedClientKey_ = other.encryptedClientKey_;
      authHash_ = other.authHash_;
      encryptedDataKey_ = other.encryptedDataKey_;
      loginType_ = other.loginType_;
      name_ = other.name_;
      algorithm_ = other.algorithm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest Clone() {
      return new UserAuthRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 2;
    private pb::ByteString salt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Salt {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iterations" field.</summary>
    public const int IterationsFieldNumber = 3;
    private int iterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iterations {
      get { return iterations_; }
      set {
        iterations_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 4;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authHash" field.</summary>
    public const int AuthHashFieldNumber = 5;
    private pb::ByteString authHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthHash {
      get { return authHash_; }
      set {
        authHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 6;
    private pb::ByteString encryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDataKey {
      get { return encryptedDataKey_; }
      set {
        encryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 7;
    private global::Authentication.LoginType loginType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 9;
    private int algorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAuthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAuthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Salt != other.Salt) return false;
      if (Iterations != other.Iterations) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (AuthHash != other.AuthHash) return false;
      if (EncryptedDataKey != other.EncryptedDataKey) return false;
      if (LoginType != other.LoginType) return false;
      if (Name != other.Name) return false;
      if (Algorithm != other.Algorithm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Salt.Length != 0) hash ^= Salt.GetHashCode();
      if (Iterations != 0) hash ^= Iterations.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (AuthHash.Length != 0) hash ^= AuthHash.GetHashCode();
      if (EncryptedDataKey.Length != 0) hash ^= EncryptedDataKey.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Uid);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Salt);
      }
      if (Iterations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Iterations);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedClientKey);
      }
      if (AuthHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(AuthHash);
      }
      if (EncryptedDataKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedDataKey);
      }
      if (LoginType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) LoginType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (Algorithm != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Algorithm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Salt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Salt);
      }
      if (Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iterations);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (AuthHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthHash);
      }
      if (EncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDataKey);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Algorithm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAuthRequest other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Salt.Length != 0) {
        Salt = other.Salt;
      }
      if (other.Iterations != 0) {
        Iterations = other.Iterations;
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.AuthHash.Length != 0) {
        AuthHash = other.AuthHash;
      }
      if (other.EncryptedDataKey.Length != 0) {
        EncryptedDataKey = other.EncryptedDataKey;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadBytes();
            break;
          }
          case 18: {
            Salt = input.ReadBytes();
            break;
          }
          case 24: {
            Iterations = input.ReadInt32();
            break;
          }
          case 34: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 42: {
            AuthHash = input.ReadBytes();
            break;
          }
          case 50: {
            EncryptedDataKey = input.ReadBytes();
            break;
          }
          case 56: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            Algorithm = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UidRequest : pb::IMessage<UidRequest> {
    private static readonly pb::MessageParser<UidRequest> _parser = new pb::MessageParser<UidRequest>(() => new UidRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UidRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest(UidRequest other) : this() {
      uid_ = other.uid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest Clone() {
      return new UidRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_uid_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> uid_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UidRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UidRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uid_.Equals(other.uid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UidRequest other) {
      if (other == null) {
        return;
      }
      uid_.Add(other.uid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceClientVersionUpdateRequest : pb::IMessage<DeviceClientVersionUpdateRequest> {
    private static readonly pb::MessageParser<DeviceClientVersionUpdateRequest> _parser = new pb::MessageParser<DeviceClientVersionUpdateRequest>(() => new DeviceClientVersionUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceClientVersionUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceClientVersionUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceClientVersionUpdateRequest(DeviceClientVersionUpdateRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceClientVersionUpdateRequest Clone() {
      return new DeviceClientVersionUpdateRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceClientVersionUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceClientVersionUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceClientVersionUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertUserToV3Request : pb::IMessage<ConvertUserToV3Request> {
    private static readonly pb::MessageParser<ConvertUserToV3Request> _parser = new pb::MessageParser<ConvertUserToV3Request>(() => new ConvertUserToV3Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertUserToV3Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request(ConvertUserToV3Request other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      userAuthRequest_ = other.userAuthRequest_ != null ? other.userAuthRequest_.Clone() : null;
      encryptedClientKey_ = other.encryptedClientKey_;
      encryptedPrivateKey_ = other.encryptedPrivateKey_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request Clone() {
      return new ConvertUserToV3Request(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "userAuthRequest" field.</summary>
    public const int UserAuthRequestFieldNumber = 2;
    private global::Authentication.UserAuthRequest userAuthRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.UserAuthRequest UserAuthRequest {
      get { return userAuthRequest_; }
      set {
        userAuthRequest_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 3;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    /// <summary>
    /// gcm encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPrivateKey" field.</summary>
    public const int EncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// gcm encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPrivateKey {
      get { return encryptedPrivateKey_; }
      set {
        encryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 5;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// TODO add alternate passwords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertUserToV3Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertUserToV3Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (!object.Equals(UserAuthRequest, other.UserAuthRequest)) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (EncryptedPrivateKey != other.EncryptedPrivateKey) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (userAuthRequest_ != null) hash ^= UserAuthRequest.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (EncryptedPrivateKey.Length != 0) hash ^= EncryptedPrivateKey.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertUserToV3Request other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.userAuthRequest_ != null) {
        if (userAuthRequest_ == null) {
          UserAuthRequest = new global::Authentication.UserAuthRequest();
        }
        UserAuthRequest.MergeFrom(other.UserAuthRequest);
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.EncryptedPrivateKey.Length != 0) {
        EncryptedPrivateKey = other.EncryptedPrivateKey;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 18: {
            if (userAuthRequest_ == null) {
              UserAuthRequest = new global::Authentication.UserAuthRequest();
            }
            input.ReadMessage(UserAuthRequest);
            break;
          }
          case 26: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 42: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevisionResponse : pb::IMessage<RevisionResponse> {
    private static readonly pb::MessageParser<RevisionResponse> _parser = new pb::MessageParser<RevisionResponse>(() => new RevisionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevisionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse(RevisionResponse other) : this() {
      revision_ = other.revision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse Clone() {
      return new RevisionResponse(this);
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 1;
    private long revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevisionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevisionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Revision != other.Revision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Revision != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Revision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevisionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Revision = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeEmailRequest : pb::IMessage<ChangeEmailRequest> {
    private static readonly pb::MessageParser<ChangeEmailRequest> _parser = new pb::MessageParser<ChangeEmailRequest>(() => new ChangeEmailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEmailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest(ChangeEmailRequest other) : this() {
      newEmail_ = other.newEmail_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest Clone() {
      return new ChangeEmailRequest(this);
    }

    /// <summary>Field number for the "newEmail" field.</summary>
    public const int NewEmailFieldNumber = 1;
    private string newEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewEmail {
      get { return newEmail_; }
      set {
        newEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEmailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEmailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewEmail != other.NewEmail) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewEmail.Length != 0) hash ^= NewEmail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewEmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewEmail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEmailRequest other) {
      if (other == null) {
        return;
      }
      if (other.NewEmail.Length != 0) {
        NewEmail = other.NewEmail;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewEmail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeEmailResponse : pb::IMessage<ChangeEmailResponse> {
    private static readonly pb::MessageParser<ChangeEmailResponse> _parser = new pb::MessageParser<ChangeEmailResponse>(() => new ChangeEmailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEmailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse(ChangeEmailResponse other) : this() {
      encryptedChangeEmailToken_ = other.encryptedChangeEmailToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse Clone() {
      return new ChangeEmailResponse(this);
    }

    /// <summary>Field number for the "encryptedChangeEmailToken" field.</summary>
    public const int EncryptedChangeEmailTokenFieldNumber = 1;
    private pb::ByteString encryptedChangeEmailToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedChangeEmailToken {
      get { return encryptedChangeEmailToken_; }
      set {
        encryptedChangeEmailToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEmailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEmailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedChangeEmailToken != other.EncryptedChangeEmailToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedChangeEmailToken.Length != 0) hash ^= EncryptedChangeEmailToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedChangeEmailToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedChangeEmailToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedChangeEmailToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedChangeEmailToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEmailResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedChangeEmailToken.Length != 0) {
        EncryptedChangeEmailToken = other.EncryptedChangeEmailToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedChangeEmailToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
